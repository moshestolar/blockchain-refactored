const crypto = require('crypto')  // crypto is a Node.js native module

const cryptoHash = (... inputs) => {
   // Javascript spread operator (a.k.a. the three-dot operator a.k.a ellipsis) 
   // is used to combine all arguments, never mind how many, into one array.
   // Might want to ref. "Node.js.txt" as well
   
   // Create a sha256-dependent 'hash' object (it is full of various stuff)
   const hash = crypto.createHash('sha256') 

   // Now actually hash the input by using the 'hash.update' mehtod - it takes a string, 
   // and generates various relevant values within this 'hash' object
   //
   // hash.update(inputs.sort().join(' ')) // note1: here I could use 'my garbg' or '', rather than ' ' !
                                           // note2: the purpose of '.sort()' is to enable passing 'inputs'
                                           //        parameters in any order!     
   // There is a BUG here:
   //
   // In case 'inputs' is an array consisting of one object, inputs.sort().join(' ') is [object Object]
   //  
   //       this can be seen by doing  console.log('#####', inputs)
   //                                  console.log('#####', inputs.sort().join(' '))
   //
   // So in this case the garbage [object Object] will always produce the same garbage hash!
   // The proposed FIX is to process array 'inputs' as follows:

   hash.update(inputs.map( i=>JSON.stringify(i) ).sort().join(' '))
   //       might want to do           console.log('#####', inputs.map( i=>JSON.stringify(i) ).sort().join(' '))

   // The digest, a term that represents the result of hashing, has been generated by hash.update, above.
   return hash.digest('hex')
}

module.exports = cryptoHash; 